<?xml version="1.0" encoding="UTF-8"?>
<ipojo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="org.apache.felix.ipojo http://felix.apache.org/ipojo/schemas/CURRENT/core.xsd org.apache.felix.ipojo.handlers.jmx http://felix.apache.org/ipojo/schemas/CURRENT/jmx.xsd"
	xmlns="org.apache.felix.ipojo" xmlns:jmx="org.apache.felix.ipojo.handlers.jmx">

	<!-- The logger, specific to the bundle ATTENTION : like the activator is 
		already instantiate (cf. OSGI activator), we define the attribute "factory-method" 
		to indicate to iPojo how it retrieve the existing instance to "define" the 
		component with it -->
	<component classname="org.psem2m.isolates.slave.agent.CBundleSlaveAgentActivator"
		architecture="true" immediate="true" name="isolates-slave-agent-logger-factory"
		factory-method="getInstance">

		<provides specifications="org.psem2m.isolates.base.activators.IIsolateLoggerSvc" />

		<callback transition="validate" method="validatePojo" />
		<callback transition="invalidate" method="invalidatePojo" />
	</component>

	<!-- Agent core -->
	<component classname="org.psem2m.isolates.slave.agent.core.AgentCore"
		architecture="true" immediate="true" name="isolates-slave-agent-core-factory"
		public="false">

		<provides specifications="org.psem2m.isolates.slave.agent.ISvcAgent" />

		<requires field="pBootstrapSender" optional="false" />
		<requires field="pBundleFinderSvc" optional="false" />
		<requires field="pConfigurationSvc" optional="false" />
		<requires field="pLoggerSvc" optional="false"
			from="isolates-slave-agent-logger" />
		<requires field="pPlatformDirsSvc" optional="false" />
		<requires field="pSignalBroadcaster" optional="false" />

		<callback transition="validate" method="validatePojo" />
		<callback transition="invalidate" method="invalidatePojo" />

		<jmx:config>
			<jmx:method name="getBundleInfo"
				description="Retrieves informations about the bundle with the given ID, null if not found" />

			<jmx:method name="getBundlesState"
				description="Retrieves a Map&lt;String, int&gt; associating bundles ID and state" />

			<jmx:method name="installBundle"
				description="Install the given bundle (needs a valid URL) and returns its ID. Throws a BundleException on error" />

			<jmx:method name="refreshPackages" description="Refreshes the bundles packages" />

			<jmx:method name="startBundle" description="Starts the bundle with the given UID" />

			<jmx:method name="stopBundle" description="Stops the bundle with the given UID" />

			<jmx:method name="uninstallBundle"
				description="Uninstalls the bundle with the given UID" />

			<jmx:method name="updateBundle" description="Updates the bundle with the given UID" />
		</jmx:config>
	</component>

	<!-- Instances -->
	<instance component="isolates-slave-agent-logger-factory"
		name="isolates-slave-agent-logger" />
	<instance component="isolates-slave-agent-core-factory" name="isolates-slave-agent-core" />
</ipojo>
