Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: COHORTE :: Remote Services :: Multicast Broadcaster
Bundle-RequiredExecutionEnvironment: JavaSE-1.7
Bundle-SymbolicName: org.cohorte.remote.broadcast.multicast
Bundle-Vendor: isandlaTech.com
Bundle-Version: 1.0.0.qualifier
Created-By: iPOJO 1.10.0
Import-Package: javax.servlet;version=2.5.0, javax.servlet.http;versio
 n=2.5.0, org.apache.felix.ipojo;version="[1.8.0,2.0.0)", org.apache.f
 elix.ipojo.architecture;version="[1.8.0,2.0.0)", org.cohorte.remote;v
 ersion=1.1.0, org.cohorte.remote.beans;version=1.1.0, org.cohorte.rem
 ote.utilities;version=1.0.0, org.json, org.osgi.framework;version=1.7
 .0, org.osgi.service.cm;version=1.2, org.osgi.service.http;version=1.
 2.0, org.osgi.service.log;version=1.3
iPOJO-Components: instance { $name="multicast-starter" $component="mul
 ticast-starter-factory" }component { $name="cohorte-remote-broadcast-
 multicast" $classname="org.cohorte.remote.multicast.MulticastBroadcas
 ter" provides { $specifications="{org.cohorte.remote.IRemoteServiceBr
 oadcaster}" controller { $field="pServiceController" }}requires { $fi
 eld="pHttpService" $filter="(org.osgi.service.http.port=*)" $id="http
 .service" callback { $method="bindHttpService" $type="bind" }}require
 s { $field="pLogger" }requires { $field="pRemoteEventsListeners" $opt
 ional="true" }requires { $field="pRepository" }properties { property 
 { $name="multicast.group" $field="pMulticastGroup" $value="239.0.0.1"
  }property { $name="multicast.port" $field="pMulticastPort" $value="4
 2000" }property { $name="servlet.path" $field="pServletPath" $value="
 /pelix-dispatcher" }}callback { $transition="invalidate" $method="inv
 alidate" }callback { $transition="validate" $method="validate" }manip
 ulation { $classname="org.cohorte.remote.multicast.MulticastBroadcast
 er" interface { $name="org.cohorte.remote.IRemoteServiceBroadcaster" 
 }interface { $name="org.cohorte.remote.multicast.utils.IPacketListene
 r" }field { $name="pBundleContext" $type="org.osgi.framework.BundleCo
 ntext" }field { $name="pHttpPort" $type="int" }field { $name="pHttpSe
 rvice" $type="org.osgi.service.http.HttpService" }field { $name="pImp
 ortedEndpoints" $type="java.util.Map" }field { $name="pIsolateUID" $t
 ype="java.lang.String" }field { $name="pLogger" $type="org.osgi.servi
 ce.log.LogService" }field { $name="pMulticast" $type="org.cohorte.rem
 ote.multicast.utils.MulticastHandler" }field { $name="pMulticastGroup
 " $type="java.lang.String" }field { $name="pMulticastPort" $type="int
 " }field { $name="pRemoteEventsListeners" $type="org.cohorte.remote.I
 RemoteServiceEventListener[]" }field { $name="pRepository" $type="org
 .cohorte.remote.IRemoteServiceRepository" }field { $name="pServiceCon
 troller" $type="boolean" }field { $name="pServlet" $type="org.cohorte
 .remote.multicast.RegistryServlet" }field { $name="pServletPath" $typ
 e="java.lang.String" }method { $name="bindHttpService" $arguments="{o
 rg.osgi.service.http.HttpService,java.util.Map}" $names="{aHttpServic
 e,aServiceProperties}" }method { $name="grabData" $return="java.lang.
 String" $arguments="{java.net.InetAddress,int,java.lang.String}" $nam
 es="{aAddress,aPort,aPath}" }method { $name="grabEndpoint" $return="o
 rg.cohorte.remote.beans.RemoteServiceRegistration" $arguments="{java.
 net.InetAddress,int,java.lang.String,java.lang.String}" $names="{aAdd
 ress,aPort,aPath,aEndpointUID}" }method { $name="handleDiscovered" $a
 rguments="{java.util.List}" $names="{aEndpoints}" }method { $name="ha
 ndleError" $return="boolean" $arguments="{java.lang.Exception}" $name
 s="{aException}" }method { $name="handleEvent" $arguments="{org.cohor
 te.remote.multicast.beans.PelixMulticastPacket,java.net.InetAddress,i
 nt}" $names="{aEndpointPacket,aAddress,aPort}" }method { $name="handl
 eEventAdd" $arguments="{java.lang.String,org.cohorte.remote.multicast
 .beans.PelixMulticastPacket,java.net.InetAddress}" $names="{aEndpoint
 UID,aEndpointPacket,aAddress}" }method { $name="handleEventRemove" $a
 rguments="{java.lang.String}" $names="{aEndpointUID}" }method { $name
 ="handleEventUpdate" $arguments="{java.lang.String,org.cohorte.remote
 .multicast.beans.PelixMulticastPacket}" $names="{aEndpointUID,aEndpoi
 ntPacket}" }method { $name="handlePacket" $arguments="{java.net.InetS
 ocketAddress,byte[]}" $names="{aSender,aContent}" }method { $name="in
 validate" }method { $name="requestAllEndpoints" $return="org.cohorte.
 remote.beans.RemoteServiceEvent[]" }method { $name="requestEndpoints"
  $return="org.cohorte.remote.beans.RemoteServiceEvent[]" $arguments="
 {java.lang.String}" $names="{aIsolateUID}" }method { $name="sendDisco
 vered" $arguments="{java.lang.String,int,java.lang.String}" $names="{
 aAddress,aPort,aPath}" }method { $name="sendDiscovery" }method { $nam
 e="sendNotification" $arguments="{org.cohorte.remote.beans.RemoteServ
 iceEvent}" $names="{aEvent}" }method { $name="sendPacket" $arguments=
 "{java.util.Map}" $names="{aContent}" }method { $name="sendPacket" $a
 rguments="{java.util.Map,java.net.InetAddress,int}" $names="{aContent
 ,aTarget,aPort}" }method { $name="toString" $return="java.lang.String
 " }method { $name="validate" }}}component { $name="multicast-starter-
 factory" $classname="org.cohorte.remote.multicast.MulticastStarter" r
 equires { $field="pLogger" }requires { $field="pMulticastFactory" $fi
 lter="(factory.name=cohorte-remote-broadcast-multicast)" }callback { 
 $transition="invalidate" $method="invalidate" }callback { $transition
 ="validate" $method="validate" }manipulation { $classname="org.cohort
 e.remote.multicast.MulticastStarter" field { $name="pContext" $type="
 org.osgi.framework.BundleContext" }field { $name="pInstance" $type="o
 rg.apache.felix.ipojo.ComponentInstance" }field { $name="pLogger" $ty
 pe="org.osgi.service.log.LogService" }field { $name="pMulticastFactor
 y" $type="org.apache.felix.ipojo.Factory" }method { $name="getPropert
 y" $return="java.lang.String" $arguments="{java.lang.String,java.lang
 .String}" $names="{aKey,aDefault}" }method { $name="invalidate" }meth
 od { $name="startComponent" }method { $name="stopComponent" }method {
  $name="validate" }}}

